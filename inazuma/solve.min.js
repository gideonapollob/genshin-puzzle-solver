const solve=function(r,n,h,o){const t=function(r,n,e){let l=[];for(let t=0;t<e;t++){let e="";for(let t=0;t<n;t++)e+=r[Math.floor(Math.random()*r.length)];l.push(e)}return l}(h,o.length,2);var e=" must be a "+o.length+"-character string using the characters "+h[0]+" to "+h[h.length-1]+". Example: "+t.join(", ")+", etc.",l=" must only use the characters "+h[0]+" to "+h[h.length-1]+". Example: "+t.join(", ")+", etc.";if("string"!=typeof r)return"[Current Pattern]"+e;if(r.length!=o.length)return"[Current Pattern]"+e;function f(e,r){for(let t=0;t<e.length;t++)if(-1==r.indexOf(e[t]))return;return 1}if(!f(r=r.toUpperCase(),h))return"[Current Pattern]"+l;if("string"!=typeof n)return"[Target Pattern]"+e;if(n.length!=o.length)return"[Target Pattern]"+e;if(!f(n=n.toUpperCase(),h))return"[Target Pattern]"+l;if(r==n)return"The [Current Pattern] is already solved.";String.prototype.replaceAt=function(t,e){return this.substr(0,t)+e+this.substr(t+e.length)};let g=[];var s=function(e){let r=[];for(let t=1;t<=e;t++)r.push(t);let t=[r.slice()],n=new Array(e).fill(0),l=1,f,i;for(;l<e;)n[l]<l?(f=l%2&&n[l],i=r[l],r[l]=r[f],r[f]=i,n[l]++,l=1,t.push(r.slice())):(n[l]=0,l++);return t}(o.length);for(let e=0;e<s.length;e++){let i={},u=s[e],a=[];function c(t){let e=i[t];null==e&&(e=[]);function r(t,e){for(var r in e)t=t.replaceAt(e[r],(n=t[e[r]],h.indexOf(n)==h.length-1?h[0]:h[h.indexOf(n)+1]));var n;return t}for(var n in u){var l=r(l=t,o[u[n]-1]);if(!e.includes(l)){e.push(l),i[t]=e;var f=parseInt(u[n]);return a.push(f),l}}}let t=r;for(;t!=n;)t=c(t);if(a=function(f){for(let l=0;l<f.length-h.length+1;l++){let n=!1;for(let r=1;r<=f.length/h.length;r++){for(let e=0;e<r;e++){for(let t=1;t<h.length;t++){var i=l+r*t+e;if(f[l+e]!=f[i]){n=!1;break}n=!0}if(!n)break}n&&(f.splice(l,h.length*r),l=-1)}}return f}(a),0<g.length){let t=!1;for(var p in g)if(g[p].length>a.length){t=!0;break}t&&(g=[])}null==g.find(function(e){if(a.length==e.length){for(let t=0;t<a.length;t++)if(a[t]!=e[t])return!1;return!0}})&&g.push(a)}return g};